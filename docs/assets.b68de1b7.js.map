{"version":3,"sources":["assets/questions.js","assets/index.js"],"names":["Question","question","choices","correctAnswer","title","userAnswer","oop1","oop2","oop3","trivia1","trivia2","trivia3","sciTrivia1","sciTrivia2","sciTrivia3","oopQuiz","triviaQuiz","sciQuiz","comboQuiz","timer","thisQuiz","quizzes","repeatedQuizIndex","quizzesAlreadyTaken","totalCorrect","totalIncorrect","totalQuestionCount","totalScore","Quiz","correct","incorrect","counter","questionsArray","quizQuestionBanks","push","arr1","arr2","_","isEqual","randomIndex","Math","floor","random","length","console","log","includes","setQuestionBank","unshift","startQuiz","timeInSeconds","arr","i","j","$","html","convertTime","finishQuiz","titleArray","map","$titleArray","Array","from","Set","prepend","join","setTitle","hide","addClass","areEqual","sort","result","setInterval","runCounter","bind","after","remove","randomize","forEach","quizQuestion","index","append","choice","clearInterval","score","toFixed","on","questionIndex","attr","answer","val","document","empty","addQuestionBank","window","location","reload"],"mappings":"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","file":"assets.b68de1b7.js","sourceRoot":"..\\src","sourcesContent":["//class for making the question objects, takes in the question, choices, and correctAnswer.\nclass Question {\n  constructor(question, choices, correctAnswer, title) {\n    this.question = question;\n    this.choices = choices;\n    this.correctAnswer = correctAnswer;\n    this.title = title;\n    this.userAnswer = '';\n  }\n}\n\n//make some question objects with the blueprint\nconst oop1 = new Question(\n  'What is not a principle of Object Oriented Programming?',\n  [\n    'Abstraction',\n    'Encapsulation',\n    'Inheritence',\n    'Polymorphism',\n    'Impressionism'\n  ],\n  'Impressionism',\n  'Object Oriented Programming'\n);\n\nconst oop2 = new Question(\n  'What type of inheritence pattern is utilized in JavaScript?',\n  ['Prototypal', 'Classical', 'Trust'],\n  'Prototypal',\n  'Object Oriented Programming'\n);\n\nconst oop3 = new Question(\n  'Which is better? Functional Programming or Object Oriented Programming?',\n  [\n    'Object Oriented Programming',\n    'Functional Programming',\n    'Neither, everything has its uses'\n  ],\n  'Neither, everything has its uses',\n  'Object Oriented Programming'\n);\n\nconst trivia1 = new Question(\n  \"Which group released the hit song, 'Smells Like Teen Spirit'?\",\n  ['Nirvana', 'Backstreet Boys', 'The Offspring', 'No Doubt'],\n  'Nirvana',\n  \"90's Trivia\"\n);\n\nconst trivia2 = new Question(\n  \"What was Doug's best friend's name?\",\n  ['Skeeter', 'Mark', 'Zach', 'Cody'],\n  'Skeeter',\n  \"90's Trivia\"\n);\n\nconst trivia3 = new Question(\n  'What was the name of the principal at Bayside High in Saved By The Bell?',\n  ['Mr.Zhou', 'Mr.Driggers', 'Mr.Belding', 'Mr.Page'],\n  'Mr.Belding',\n  \"90's Trivia\"\n);\n\nconst sciTrivia1 = new Question(\n  \"What is the name of Jupiter's largest moon\",\n  ['Oberon', 'Ganymede', 'Titan', 'Europa'],\n  'Ganymede',\n  'Science Quiz'\n);\n\nconst sciTrivia2 = new Question(\n  \"What does the 'c' in E=mc^2 stand for?\",\n  ['Energy', 'Speed of Light', 'Mass', 'Dark Matter'],\n  'Speed of Light',\n  'Science Quiz'\n);\n\nconst sciTrivia3 = new Question(\n  'What precious stone is the hardest?',\n  ['Diamond', 'Ruby', 'Sapphire', 'Emerald'],\n  'Diamond',\n  'Science Quiz'\n);\n\n//declare some question group arrays to use in the addQuestions method\nconst oopQuiz = [oop1, oop2, oop3];\nconst triviaQuiz = [trivia1, trivia2, trivia3];\nconst sciQuiz = [sciTrivia1, sciTrivia2, sciTrivia3];\nconst comboQuiz = [...oopQuiz, ...sciQuiz, ...triviaQuiz];\n\nexport { oopQuiz, triviaQuiz, sciQuiz, comboQuiz };\n","import { comboQuiz, sciQuiz, triviaQuiz, oopQuiz } from './questions';\n\n// declare variable for timer\nlet timer;\n// declare variable for the quiz object\nlet thisQuiz;\n// keep track of quiz totals since a new quiz object is being created for each new quiz.\nconst quizzes = {\n  repeatedQuizIndex: [],\n  quizzesAlreadyTaken: [],\n  totalCorrect: 0,\n  totalIncorrect: 0,\n  totalQuestionCount: 0,\n  totalScore: 0\n};\n\n//class blueprint for new Quiz objects, sets correct and incorrect to 0, sets questionsArray and quizQuestionBanks to an empty array\nclass Quiz {\n  constructor() {\n    this.correct = 0;\n    this.incorrect = 0;\n    this.counter = 0;\n    //questionsArray will hold the quiz array for the specific instance of the quiz being generated\n    this.questionsArray = [];\n    //this array holds all the questionBanks as an array of arrays, allowing the quiz to be randomly generated.\n    this.quizQuestionBanks = [];\n  }\n\n  //method to add questions to any array. Since the exact number of questions for each quiz can be anything the rest parameter is used.\n  addQuestionBank(...questions) {\n    //push our array of questionBanks\n    this.quizQuestionBanks.push(...questions);\n  }\n  //use lodash to check for 2 equal arrays\n  areEqual(arr1, arr2) {\n    return _.isEqual(arr1, arr2);\n  }\n\n  setQuestionBank() {\n    //grab random index based on question bank array\n    let randomIndex = Math.floor(Math.random() * this.quizQuestionBanks.length);\n    console.log(randomIndex);\n    //add randomIndex to repeatedQuizIndex[0]\n    //if repeated Quiz index does not include the random index\n    if (!quizzes.repeatedQuizIndex.includes(randomIndex)) {\n      //set index to [0]\n      quizzes.repeatedQuizIndex.unshift(randomIndex);\n      //set questions array to the randomly chosen bank\n      this.questionsArray = this.quizQuestionBanks[randomIndex];\n      //set counter to a certain amount of seconds per question\n      this.counter = this.questionsArray.length * 10;\n      //start the quiz\n      this.startQuiz();\n    } else {\n      //run this again\n      this.setQuestionBank();\n    }\n  }\n\n  //method to convert seconds into minutes for the counter\n  convertTime(timeInSeconds) {\n    return `${Math.floor(timeInSeconds / 60)}:${(timeInSeconds % 60 < 10\n      ? '0'\n      : '') +\n      (timeInSeconds % 60)}`;\n  }\n\n  // method to randomize both the questions and answers\n  randomize(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  runCounter() {\n    this.counter--;\n    $('#counter-number').html(this.convertTime(this.counter));\n    if (this.counter === 0) {\n      this.finishQuiz();\n    }\n  }\n\n  // this allows combo quizzes to combine titles\n  setTitle() {\n    //get title\n    const titleArray = this.questionsArray.map(question => question.title);\n    //use a set to remove dupes instead\n    const $titleArray = Array.from(new Set(titleArray));\n    $('#quiz-wrapper').prepend(\n      `<h2 class=\"title my-4\">${$titleArray.join(` & `)}</h2>`\n    );\n\n    // $(\".title\").css(\"background\", \"black\");\n    //   //starting themes based on title\n    // if ($titleArray[0] === \"90's Trivia\") {\n    //   $(\"body\").css(\"background-image\", \"url('assets/images/tacky.jpg')\");\n    // } else {\n    //   $(\"body\").css(\"background\", \"black\");\n    // }\n  }\n\n  startQuiz() {\n    this.setTitle();\n    $('.jumbo-style').hide();\n    $('#quiz-wrapper').addClass('mt-5');\n    $('.card-bg').addClass('border-light');\n    //checking if the 2 arrays are equal before allowing quiz to be taken.\n    const { quizzesAlreadyTaken } = quizzes;\n    if (\n      !this.areEqual(quizzesAlreadyTaken.sort(), this.quizQuestionBanks.sort())\n    ) {\n      //setInterval method called to run the counter method every second. Bind this so it doesn't lose context.\n      timer = setInterval(this.runCounter.bind(this), 1000);\n\n      $('.title').after(\n        `<h2 class=\"my-4\">Time Remaining: <span id=\"counter-number\">${this.convertTime(\n          this.counter\n        )}</span></h2>`\n      );\n\n      $('#start').remove();\n      this.randomize(this.questionsArray);\n      this.questionsArray.forEach((quizQuestion, index) => {\n        const { question, choices } = quizQuestion;\n\n        $('#quiz').append(`\n        <h2 class=\"rounded my-4\">${question}</h2>\n       `);\n        this.randomize(choices);\n        choices.forEach((choice, index) => {\n          $('#quiz').append(\n            `<div class=\"form-check form-check-inline my-2\">\n            <input class=\"form-check-input\" name=\"${index}\" type=\"radio\" id=\"${choice}\" value=\"${choice}\">\n            <label class=\"form-check-label answers\" for=\"${choice}\">${choice}</label>\n          </div>`\n          );\n        });\n      });\n\n      $('#quiz').append(`\n    <div class=\"row justify-content-center\">\n      <button class=\"mt-4 btn btn-outline-danger\" id=\"finish\">Finish</button>\n    </div`);\n    } else {\n      this.result();\n    }\n  }\n\n  finishQuiz() {\n    const { quizzesAlreadyTaken } = quizzes;\n    //push quiz here once it is finished\n    quizzesAlreadyTaken.push(this.questionsArray);\n    for (let i = 0; i < this.questionsArray.length; i++) {\n      const { correctAnswer, userAnswer } = this.questionsArray[i];\n      if (userAnswer === correctAnswer) {\n        this.correct++;\n      } else {\n        this.incorrect++;\n      }\n    }\n    this.result();\n  }\n\n  result() {\n    clearInterval(timer);\n\n    $('#quiz-wrapper h2').remove();\n\n    let score = `${((this.correct / this.questionsArray.length) * 100).toFixed(\n      2\n    )}%`;\n\n    quizzes.totalCorrect += this.correct;\n    quizzes.totalIncorrect += this.incorrect;\n    quizzes.totalQuestionCount += this.questionsArray.length;\n    quizzes.totalScore = `${(\n      (quizzes.totalCorrect / quizzes.totalQuestionCount) *\n      100\n    ).toFixed(2)}%`;\n\n    $('#quiz').html(`\n    <h2 class=\"finished\">Finished</h2>\n    <div class=\"card-body game-stats\"></div>\n    `);\n    $('.game-stats').append(`\n    <h3>Correct: ${this.correct}</h3>\n    <h3>Incorrect: ${this.incorrect}</h3>\n    <h2>Your Score: ${score}</h2>\n    <hr class=\"my-4\">\n    <h3>Total Correct: ${quizzes.totalCorrect}</h3>\n    <h3>Total Incorrect: ${quizzes.totalIncorrect}</h3>\n    <h2>Total Score: ${quizzes.totalScore}</h3>\n    <button class=\"btn btn-outline-success mt-4\" id=\"start\">Start Next Quiz</button>\n    `);\n\n    if (quizzes.quizzesAlreadyTaken.length === this.quizQuestionBanks.length) {\n      //remove start button so you can't click it again bc the browser will crash. condition in set question bank causes it.\n      $('#start').remove();\n      $('.finished').html(`<h3>You've taken all the quizzes!</h3>`);\n      $('.game-stats').append(\n        `<button class=\"btn btn-outline-success mt-4\" id=\"start-over\">Start Over</button>`\n      );\n    }\n  }\n}\n\n$('#quiz').on('change', '.form-check-input', function() {\n  // GET question index out of \"name\" attribute so we know what question you answered\n  const questionIndex = $(this).attr('name');\n  // get value out of radio button selected\n  const answer = $(this).val();\n  // set answer to question's userAnswer property\n  thisQuiz.questionsArray[questionIndex].userAnswer = answer;\n});\n\n$(document).on('click', '#start', function() {\n  $('#quiz').empty();\n  //create newQuiz object\n  thisQuiz = new Quiz();\n  //add quiz question arrays declared earlier\n  thisQuiz.addQuestionBank(comboQuiz, sciQuiz, oopQuiz, triviaQuiz);\n  //set the questionBank to the new quiz\n  thisQuiz.setQuestionBank();\n  //start quiz\n  // thisQuiz.startQuiz();\n});\n\n$(document).on('click', '#finish', function() {\n  thisQuiz.finishQuiz();\n});\n\n$(document).on('click', '#start-over', function() {\n  window.location.reload();\n});\n"]}